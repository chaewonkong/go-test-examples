// Code generated by mockery. DO NOT EDIT.

// NOTE: run 'make mocks' to update this file and generate new ones.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// FetchUser is an autogenerated mock type for the FetchUser type
type FetchUser struct {
	mock.Mock
}

type FetchUser_Expecter struct {
	mock *mock.Mock
}

func (_m *FetchUser) EXPECT() *FetchUser_Expecter {
	return &FetchUser_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields: c
func (_m *FetchUser) FindAll(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchUser_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type FetchUser_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - c echo.Context
func (_e *FetchUser_Expecter) FindAll(c interface{}) *FetchUser_FindAll_Call {
	return &FetchUser_FindAll_Call{Call: _e.mock.On("FindAll", c)}
}

func (_c *FetchUser_FindAll_Call) Run(run func(c echo.Context)) *FetchUser_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *FetchUser_FindAll_Call) Return(_a0 error) *FetchUser_FindAll_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindOne provides a mock function with given fields: c
func (_m *FetchUser) FindOne(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchUser_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type FetchUser_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - c echo.Context
func (_e *FetchUser_Expecter) FindOne(c interface{}) *FetchUser_FindOne_Call {
	return &FetchUser_FindOne_Call{Call: _e.mock.On("FindOne", c)}
}

func (_c *FetchUser_FindOne_Call) Run(run func(c echo.Context)) *FetchUser_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *FetchUser_FindOne_Call) Return(_a0 error) *FetchUser_FindOne_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewFetchUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewFetchUser creates a new instance of FetchUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFetchUser(t mockConstructorTestingTNewFetchUser) *FetchUser {
	mock := &FetchUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
