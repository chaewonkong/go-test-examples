// Code generated by mockery. DO NOT EDIT.

// NOTE: run 'make mocks' to update this file and generate new ones.

package mocks

import (
	domain "github.com/chaewonkong/go-test-examples/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields:
func (_m *UserRepository) FindAll() ([]domain.User, error) {
	ret := _m.Called()

	var r0 []domain.User
	if rf, ok := ret.Get(0).(func() []domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type UserRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *UserRepository_Expecter) FindAll() *UserRepository_FindAll_Call {
	return &UserRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *UserRepository_FindAll_Call) Run(run func()) *UserRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserRepository_FindAll_Call) Return(_a0 []domain.User, _a1 error) *UserRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindOne provides a mock function with given fields: name
func (_m *UserRepository) FindOne(name string) (domain.User, error) {
	ret := _m.Called(name)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type UserRepository_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - name string
func (_e *UserRepository_Expecter) FindOne(name interface{}) *UserRepository_FindOne_Call {
	return &UserRepository_FindOne_Call{Call: _e.mock.On("FindOne", name)}
}

func (_c *UserRepository_FindOne_Call) Run(run func(name string)) *UserRepository_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepository_FindOne_Call) Return(_a0 domain.User, _a1 error) *UserRepository_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
